
# Set defaults for all jobs
defaults: &defaults
  working_directory: ~/repo
  environment:
    CC_TEST_REPORTER_ID: f1f177b507409fef56b1c05490190c9648038659db16e46420c2e12d9d3d1f9b 
    TZ: /usr/share/zoneinfo/America/New_York
  docker:
    - image: circleci/node:carbon

version: 2
jobs:
  setup:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          name: Restore cache
          keys:
            - cache-{{ .Branch }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - cache-{{ .Branch }}-
            - cache-
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Install Code Climate Test Reporter
          # inline BASH script that checks if the cc-test-reporter binary exists
          # and downloads it and sets the executable bit if it doesn't
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter; fi
      - save_cache:
          name: Cache node_modules and Code Climate Test Reporter
          paths:
            - node_modules
            - cc-test-reporter
          key: cache-{{ .Branch }}-{{ checksum "package.json" }}
      - persist_to_workspace:
          root: ~/repo
          paths:
            - node_modules
            - cc-test-reporter

  test:linters:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Run linters
          command: |
            npm run lint-js -- --max-warnings=0 && npm run lint-css

  build:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      # Generate a build
      - run:
          name: Build the application
          command: |
            npm run build
      - run:
          name: Compress the build directory into a tarball
          command: |
            tar -czf build.tar.gz build
     # Store Assets generated by npm build
      - store_artifacts:
          path: bundlesize
      - store_artifacts:
          path: build.tar.gz
  test:unit:
    <<: *defaults
    parallelism: 3
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      # CircleCI 2.0 no longer allows interpolation of env variables. This is the workaround:
      # https://discuss.circleci.com/t/using-environment-variables-in-config-yml-not-working/14237
      - run:
          command: mkdir results
      - run:
          name: Set JEST_JUNIT_OUTPUT
          command: echo 'export JEST_JUNIT_OUTPUT="results/junit-$CIRCLE_NODE_INDEX.xml"' >> $BASH_ENV
      - run:
          name: Prepare Code Climate Test Reporter
          command: |
            ./cc-test-reporter before-build
      - run:
          name: Run tests
          # split tests by timing and then run npm test
          command: |
            circleci tests glob "src/**/*.test.js" | circleci tests split --split-by=timings | \
            xargs npm test -- --testResultsProcessor="jest-junit"  --coverage
      - run:
          name: Format coverage
          command: |
            ./cc-test-reporter format-coverage --output coverage/codeclimate.$CIRCLE_NODE_INDEX.json
      - persist_to_workspace:
          root: ~/repo
          paths:
            - results
            - coverage
            - cc-test-reporter
          
  coverage:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Send Istanbul LCOV Results to Code Climate
          command: |
            ./cc-test-reporter sum-coverage coverage/codeclimate.*.json
            ./cc-test-reporter upload-coverage
      - store_artifacts:
          path: coverage

workflows:
  version: 2
  all-but-release:
    jobs:
      - setup:
          filters:
            tags:
              ignore: /^v.*/
      - test:linters:
          requires:
            - setup
          filters:
            tags:
              ignore: /^v.*/
      - test:unit:
          requires:
            - setup
          filters:
            tags:
              ignore: /^v.*/
      - coverage:
          requires:
            - test:unit
          filters:
            tags:
              ignore: /^v.*/
